{"version":3,"sources":["API.js","icms/HeaderComponent.js","icms/ListIssues.js","icms/GenesisComponent.js","App.js","index.js"],"names":["DB","axios","create","baseURL","responseType","get","then","content","data","HeaderComponent","props","_this","Object","classCallCheck","this","_super","call","state","nm","_this2","toggleNightMode","setState","night","react_default","a","createElement","className","role","aria-label","onClick","window","location","reload","src","style","height","alt","Component","ListIssues","issues","all_issues","asc_sort_order","pageSize","selectedIssue","lastVisitedIssue","updatePageNumber","bind","assertThisInitialized","selectIssue","updateIssuesList","updated_props","projectName","project","_this3","project_issues","activePage","_this4","so","darkTableClass","length","map","ei","getRowFromIssue","issueId","issue_summary","arguments","undefined","each_issue","_this5","displayDate","Date","parseInt","toLocaleString","timeZone","is_warning_issue","tableClasses","classNames","is-active","disabled","status","is-warning","has-background-grey-dark has-text-white ","key","getIconForEntityType","entity_type","tagClasses","tag is-light","tag is-white","_","_ref","pg","slice","GenesisComponent","projectList","setTimeout","projects","_this$state","darkClasses","marginTop","p","visible","setProject","ListIssues_ListIssues","HeaderComponent_HeaderComponent","_nm","App","showICMS","openICMS","GenesisComponent_GenesisComponent","classes","entries","filter","_ref2","slicedToArray","_ref3","_ref4","join","styleLink","document","rel","href","head","appendChild","fontAwesomeDep","rootElement","getElementById","ReactDOM","render","StrictMode","App_App"],"mappings":"wPAEWA,EAAK,UAChBC,EACKC,OAAO,CACJC,QAAS,yDACTC,aAAc,SAEjBC,IAAI,qBACJC,KAAK,SAAAC,GACFP,EAAKO,EAAQC,WCRAC,oDACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAI,EAAAC,KAAAF,KAAMJ,IACDO,MAAQ,CAACC,IAAI,GAFHP,uDAKV,IAAAQ,EAAAL,KACCM,EAAkB,WACpBD,EAAKE,SAAS,CAACH,IAAKC,EAAKF,MAAMC,IAAK,WAChCC,EAAKT,MAAMY,MAAMH,EAAKF,MAAMC,OAG7BA,EAAMJ,KAAKG,MAAXC,GAEP,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAW,wBAA0BR,EAAK,UAAY,WAAYS,KAAK,aACvEC,aAAW,mBACZL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeG,QAAS,kBAAMC,OAAOC,SAASC,WACzDT,EAAAC,EAAAC,cAAA,OAAKQ,IAAI,oEACJC,MAAO,CAACC,OAAQ,QAASC,IAAI,iBAEtCb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WACPR,GACEK,EAAAC,EAAAC,cAAA,KAAGC,UAAW,kBAAmBG,QAAST,GACtCG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAEjBH,EAAAC,EAAAC,cAAA,sBAGJF,EAAAC,EAAAC,cAAA,KAAGC,UAAW,kBAAmBG,QAAST,GACtCG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAEjBH,EAAAC,EAAAC,cAAA,iCApCSY,aCGxBC,oDACjB,SAAAA,EAAY5B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACf3B,EAAAI,EAAAC,KAAAF,KAAMJ,IACDO,MAAQ,CACTsB,OAAQ,GACRC,WAAY,GACZC,gBAAgB,EAChBC,SAAU,GACVC,cAAe,GACfC,iBAAkB,IAEtBjC,EAAKkC,iBAAmBlC,EAAKkC,iBAAiBC,KAAtBlC,OAAAmC,EAAA,EAAAnC,CAAAD,IACxBA,EAAKqC,YAAcrC,EAAKqC,YAAYF,KAAjBlC,OAAAmC,EAAA,EAAAnC,CAAAD,IAXJA,kEAefG,KAAKmC,qEAGiBC,GAAe,IAAA/B,EAAAL,KACjCA,KAAKG,MAAMkC,cAAgBD,EAAcE,SACzCtC,KAAKO,SACD,CAACsB,cAAe,GAAIQ,YAAaD,EAAcE,SAC/C,WACIjC,EAAK8B,gEAMF,IAAAI,EAAAvC,KACXwC,EAAiBtD,EAAGuC,OAAOzB,KAAKJ,MAAM0C,SACtCE,EACAxC,KAAKO,SAAS,CAACmB,WAAYc,GAAiB,WACxCD,EAAKR,iBAAiB,KAAM,CAACU,WAAY,MAG7CzC,KAAKO,SAAS,CAACmB,WAAY,IAAK,WAC5Ba,EAAKR,iBAAiB,KAAM,CAACU,WAAY,uCAK5C,IAAAC,EAAA1C,KACC2C,EAAK3C,KAAKG,MAAMwB,eAAiB,aAAe,cAMhDiB,GALa5C,KAAKG,MAAMuB,WAAWmB,OAAS7C,KAAKG,MAAMyB,SACvC5B,KAAKG,MAAM0B,cAIV7B,KAAKJ,MAAMQ,GAAK,4CAA6C,IAYpF,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,8CACbH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAWgC,GACXnC,EAAAC,EAAAC,cAAA,MAAIC,UAAWgC,GAAf,eACAnC,EAAAC,EAAAC,cAAA,MAAIC,UAAWgC,GAAf,eACAnC,EAAAC,EAAAC,cAAA,MAAIC,UAAWgC,GAAf,aACAnC,EAAAC,EAAAC,cAAA,MAAIC,UAAW,UAAY+B,EAAKC,EAAgB7B,QAxBnD,WACb2B,EAAKnC,SAAS,CAACoB,gBAAiBe,EAAKvC,MAAMwB,mBAuB3B,cACAlB,EAAAC,EAAAC,cAAA,MAAIC,UAAWgC,GAAf,UACAnC,EAAAC,EAAAC,cAAA,MAAIC,UAAWgC,GAAf,SACAnC,EAAAC,EAAAC,cAAA,MAAIC,UAAWgC,GAAf,aAGJnC,EAAAC,EAAAC,cAAA,aACCX,KAAKG,MAAMsB,OAAOqB,IAAI,SAAAC,GAAE,OAAIL,EAAKM,gBAAgBD,6CAmC1DE,GAA6B,IAApBC,EAAoBC,UAAAN,OAAA,QAAAO,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GAC5BF,EAEDjD,KAAKO,SAAS,CACVsB,cAAeoB,EACfC,cAAeA,EACfpB,iBAAkBmB,IALZjD,KAAKO,SAAS,CAACsB,cAAeoB,EAASC,cAAe,6CASxDG,GAAY,IAAAC,EAAAtD,KAClBuD,EAAc,IAAIC,KACpBC,SAASJ,EAAU,aACrBK,eAAe,QAAS,CAACC,SAAU,QAC/BC,EAAmBH,SAASJ,EAAU,QAAc,IAGpDQ,EAAeC,EAAW,CAC5BC,YAFA/D,KAAKG,MAAM2B,mBAAqBuB,EAAU,YAEZW,SAAkC,WAAtBX,EAAWY,OACrDC,aAAcN,EAAkBO,2CAA4CnE,KAAKJ,MAAMQ,KAG3F,OACIK,EAAAC,EAAAC,cAAA,MAAIyD,IAAK,YAAcf,EAAU,YAC7BtC,QAAS,kBAAMuC,EAAKpB,YAAYmB,EAAU,YAAiBA,IAC3DzC,UAAWiD,GACXpD,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qCACXyC,EAAU,cAGnB5C,EAAAC,EAAAC,cAAA,UACKX,KAAKqE,qBAAqBhB,EAAU,cAEzC5C,EAAAC,EAAAC,cAAA,UAAK0C,EAAU,WACf5C,EAAAC,EAAAC,cAAA,cAAM4C,EAAN,KACA9C,EAAAC,EAAAC,cAAA,UAAK0C,EAAU,QACf5C,EAAAC,EAAAC,cAAA,UACKiD,GAAoBnD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBACpCyC,EAAU,OAEf5C,EAAAC,EAAAC,cAAA,UAAK0C,EAAU,uDAKNiB,GACjB,IAAMC,EAAaT,EAAW,CAACU,gBAAiBxE,KAAKJ,MAAMQ,GAAIqE,eAAgBzE,KAAKJ,MAAMQ,KAC1F,MAAoB,YAAhBkE,EAEI7D,EAAAC,EAAAC,cAAA,QAAMC,UAAW2D,GACb9D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAEhB0D,GAGc,aAAhBA,EAEH7D,EAAAC,EAAAC,cAAA,QAAMC,UAAW2D,GACb9D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAEhB0D,GAGc,aAAhBA,EAEH7D,EAAAC,EAAAC,cAAA,QAAMC,UAAW2D,GACb9D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAEhB0D,GAGc,WAAhBA,EAEH7D,EAAAC,EAAAC,cAAA,QAAMC,UAAW2D,GACb9D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAEhB0D,QANN,2CAYMI,KAAiB,IAAbjC,EAAakC,EAAblC,WACbmC,EAAK5E,KAAKG,MAAMyB,SAChBiD,EAAQ7E,KAAKG,MAAMuB,WAAWmD,MAC9BD,GAAMnC,EAAa,GACnBmC,EAAKnC,GAETzC,KAAKO,SAAS,CAACkB,OAAQoD,WA9MStD,aCCnBuD,oDACjB,SAAAA,IAAc,IAAAjF,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8E,IACVjF,EAAAI,EAAAC,KAAAF,OACKG,MAAQ,CACTmC,QAAS,GACTyC,YAAa,GACb3E,IAAI,GALEP,kEASM,IAAAQ,EAAAL,KAChBgF,WAAW,WACP,IAAIC,EAAW/F,EAAG+F,SACdA,GACA5E,EAAKE,SAAS,CAACwE,YAAaE,EAAU3C,QAAS2C,EAAS,MAC7D,sCAGE,IAAA1C,EAAAvC,KAAAkF,EAK8BlF,KAAKG,MAAjCC,EALF8E,EAKE9E,GAAI2E,EALNG,EAKMH,YAAazC,EALnB4C,EAKmB5C,QAClB6C,EAAc/E,EAAK,4CAA8C,GAGvE,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAW,uBAAwBQ,MAAO,CAACgE,UAAW,SACvD3E,EAAAC,EAAAC,cAAA,OAAKC,UAAW,qBAAwBuE,GACpC1E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,YAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACTmE,EAAYlC,QACTkC,EAAYjC,IAAI,SAAAuC,GAAC,OACb5E,EAAAC,EAAAC,cAAA,MAAII,QAAS,kBApB9B,SAAAsE,GACXA,EAAG9C,EAAKhC,SAAS,CAAC+B,QAAS+C,EAAGC,SAAS,IACtC/C,EAAKhC,SAAS,CAAC+E,SAAS,IAkBsBC,CAAWF,KAAI5E,EAAAC,EAAAC,cAAA,KAC9BC,UAAWyE,IAAM/C,EAAU,YAAc,IAAK+C,OAErD5E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAf,mBAIjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACT0B,GACK7B,EAAAC,EAAAC,cAAC6E,EAAD,CAAYlD,QAASA,EAASlC,GAAIA,KACtCK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAf,mBAIfH,EAAAC,EAAAC,cAAC8E,EAAD,CAAiBjF,MAAO,SAAAkF,GAAG,OAAInD,EAAKhC,SAAS,CAACH,GAAIsF,eArDpBnE,aCAzBoE,oDACjB,SAAAA,IAAc,IAAA9F,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2F,IACV9F,EAAAI,EAAAC,KAAAF,OACKG,MAAQ,CACTmF,SAAS,EACTM,UAAU,GAEd/F,EAAKgG,SAAWhG,EAAKgG,SAAS7D,KAAdlC,OAAAmC,EAAA,EAAAnC,CAAAD,IANNA,yDAUVG,KAAKO,SAAS,CAACqF,UAAU,qCAIzB,OAAI5F,KAAKG,MAAMyF,SACJnF,EAAAC,EAAAC,cAACmF,EAAD,MAIPrF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,QACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,wBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,iDACAH,EAAAC,EAAAC,cAAA,UAAQI,QAASf,KAAK6F,SAAUjF,UAAU,sBAA1C,aACAH,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,2BAAd,sDAzBiBY,aA+B1B,SAASuC,EAAWiC,GACvB,OAAOjG,OAAOkG,QAAQD,GACjBE,OAAO,SAAAtB,GAAA,IAAAuB,EAAApG,OAAAqG,EAAA,EAAArG,CAAA6E,EAAA,GAAAuB,EAAA,UAAAA,EAAA,KACPpD,IAAI,SAAAsD,GAAA,IAAAC,EAAAvG,OAAAqG,EAAA,EAAArG,CAAAsG,EAAA,GAAEhC,EAAFiC,EAAA,GAAAA,EAAA,UAAkBjC,IACtBkC,KAAK,KCnCd,IAAMC,EAAYC,SAAS7F,cAAc,QACzC4F,EAAUE,IAAM,aAChBF,EAAUG,KAAO,6DACjBF,SAASG,KAAKC,YAAYL,GAC1B,IAAMM,EAAiBL,SAAS7F,cAAc,QAC9CkG,EAAeJ,IAAM,aACrBI,EAAeH,KAAO,0DACtBF,SAASG,KAAKC,YAAYC,GAG1B,IAAMC,EAAcN,SAASO,eAAe,QAC5CC,IAASC,OACLxG,EAAAC,EAAAC,cAACF,EAAAC,EAAMwG,WAAP,KACIzG,EAAAC,EAAAC,cAACwG,EAAD,OAEJL","file":"static/js/main.9a02a4ca.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport let DB = {};\naxios\n    .create({\n        baseURL: \"https://raw.githubusercontent.com/MrL1605/demo/master/\",\n        responseType: \"json\"\n    })\n    .get(\"/large-db-v3.json\")\n    .then(content => {\n        DB = content.data;\n    });\n\n// https://raw.githubusercontent.com/MrL1605/demo/master/db.json\n// https://raw.githubusercontent.com/MrL1605/demo/master/large-db.json\n// https://raw.githubusercontent.com/MrL1605/demo/master/large-db-v3.json\n","import React, {Component} from \"react\";\n\nexport default class HeaderComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {nm: false};\n    }\n\n    render() {\n        const toggleNightMode = () => {\n            this.setState({nm: !this.state.nm}, () => {\n                this.props.night(this.state.nm);\n            });\n        };\n        const {nm} = this.state;\n\n        return (\n            <nav className={\"navbar is-fixed-top \" + (nm ? \"is-dark\" : \"is-link\")} role=\"navigation\"\n                 aria-label=\"main navigation\">\n                <div className=\"navbar-brand\" onClick={() => window.location.reload()}>\n                    <img src=\"https://github.com/MrL1605/demo/raw/master/assets/clari5_logo.png\"\n                         style={{height: \"58px\"}} alt=\"Clari5 Logo\"/>\n                </div>\n                <div className=\"navbar-end\">\n                    <div className=\"navbar-item\">\n                        <p className=\"control\">\n                            {(nm && (\n                                <a className={\"button is-black\"} onClick={toggleNightMode}>\n                                    <span className=\"icon\">\n                                        <i className=\"fas fa-moon\"/>\n                                    </span>\n                                    <span>Dark</span>\n                                </a>\n                            )) || (\n                                <a className={\"button is-light\"} onClick={toggleNightMode}>\n                                    <span className=\"icon\">\n                                        <i className=\"fas fa-sun\"/>\n                                    </span>\n                                    <span>Light</span>\n                                </a>\n                            )}\n                        </p>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport {DB} from \"../API\";\nimport {classNames} from \"../App\";\n// import DetailsComponent from \"./DetailsComponent\";\n\nexport default class ListIssues extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            issues: [],\n            all_issues: [],\n            asc_sort_order: true,\n            pageSize: 20,\n            selectedIssue: \"\",\n            lastVisitedIssue: \"\"\n        };\n        this.updatePageNumber = this.updatePageNumber.bind(this);\n        this.selectIssue = this.selectIssue.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateIssuesList();\n    }\n\n    componentWillReceiveProps(updated_props) {\n        if (this.state.projectName !== updated_props.project) {\n            this.setState(\n                {selectedIssue: \"\", projectName: updated_props.project},\n                () => {\n                    this.updateIssuesList();\n                }\n            );\n        }\n    }\n\n    updateIssuesList() {\n        let project_issues = DB.issues[this.props.project];\n        if (project_issues) {\n            this.setState({all_issues: project_issues}, () => {\n                this.updatePageNumber(null, {activePage: 1});\n            });\n        } else {\n            this.setState({all_issues: []}, () => {\n                this.updatePageNumber(null, {activePage: 1});\n            });\n        }\n    }\n\n    render() {\n        const so = this.state.asc_sort_order ? \"ascending \" : \"descending \";\n        const totalPages = this.state.all_issues.length / this.state.pageSize;\n        const selectedIssue = this.state.selectedIssue;\n        let toggleSort = () => {\n            this.setState({asc_sort_order: !this.state.asc_sort_order});\n        };\n        const darkTableClass = this.props.nm ? \"has-background-grey-darker has-text-white\": \"\";\n        // if (selectedIssue)\n        //     return (\n        //         <DetailsComponent\n        //             goBack={() => this.selectIssue(\"\")}\n        //             issueId={selectedIssue}\n        //             project={this.props.project}\n        //             issue_summary={this.state.issue_summary}\n        //             nm={this.props.nm}\n        //         />\n        //     );\n\n        return (\n            <div className=\"container\">\n                <div>\n                    <table className=\"table is-striped is-hoverable is-fullwidth\">\n                        <thead>\n                        <tr className={darkTableClass}>\n                            <th className={darkTableClass}>Incident Id</th>\n                            <th className={darkTableClass}>Entity Type</th>\n                            <th className={darkTableClass}>Entity Id</th>\n                            <th className={\"sorted \" + so + darkTableClass} onClick={toggleSort}>Updated On</th>\n                            <th className={darkTableClass}>Status</th>\n                            <th className={darkTableClass}>Score</th>\n                            <th className={darkTableClass}>Summary</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.state.issues.map(ei => this.getRowFromIssue(ei))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            // <Container>\n            //     <div className=\"ui centered\">\n            //         <Pagination\n            //             inverted={this.props.nm}\n            //             onPageChange={this.updatePageNumber}\n            //             defaultActivePage={1}\n            //             ellipsisItem={{\n            //                 content: <Icon name=\"ellipsis horizontal\"/>,\n            //                 icon: true\n            //             }}\n            //             boundaryRange={0}\n            //             siblingRange={1}\n            //             firstItem={{\n            //                 content: <Icon name=\"angle double left\"/>,\n            //                 icon: true\n            //             }}\n            //             lastItem={{\n            //                 content: <Icon name=\"angle double right\"/>,\n            //                 icon: true\n            //             }}\n            //             prevItem={{content: <Icon name=\"angle left\"/>, icon: true}}\n            //             nextItem={{content: <Icon name=\"angle right\"/>, icon: true}}\n            //             totalPages={totalPages}\n            //         />\n            //     </div>\n            // </Container>\n        );\n    }\n\n    selectIssue(issueId, issue_summary = {}) {\n        if (!issueId) this.setState({selectedIssue: issueId, issue_summary: {}});\n        else\n            this.setState({\n                selectedIssue: issueId,\n                issue_summary: issue_summary,\n                lastVisitedIssue: issueId\n            });\n    }\n\n    getRowFromIssue(each_issue) {\n        const displayDate = new Date(\n            parseInt(each_issue[\"updated_on\"])\n        ).toLocaleString(\"en-IN\", {timeZone: \"UTC\"});\n        const is_warning_issue = parseInt(each_issue[\"score\"]) >= 700;\n        const is_last_visited =\n            this.state.lastVisitedIssue === each_issue[\"incident_id\"];\n        const tableClasses = classNames({\n            \"is-active\": is_last_visited, \"disabled\": each_issue.status === \"Closed\",\n            \"is-warning\": is_warning_issue, \"has-background-grey-dark has-text-white \": this.props.nm\n        });\n\n        return (\n            <tr key={\"incident_\" + each_issue[\"incident_id\"]}\n                onClick={() => this.selectIssue(each_issue[\"incident_id\"], each_issue)}\n                className={tableClasses}>\n                <td>\n                    <span className=\"tag is-success is-light is-normal\">\n                        {each_issue[\"incident_id\"]}\n                    </span>\n                </td>\n                <td>\n                    {this.getIconForEntityType(each_issue[\"entity_type\"])}\n                </td>\n                <td>{each_issue[\"entity_id\"]}</td>\n                <td> {displayDate} </td>\n                <td>{each_issue[\"status\"]}</td>\n                <td>\n                    {is_warning_issue && <span className=\"fa fas-attention\"/>}\n                    {each_issue[\"score\"]}\n                </td>\n                <td>{each_issue[\"summary\"]}</td>\n            </tr>\n        );\n    }\n\n    getIconForEntityType(entity_type) {\n        const tagClasses = classNames({\"tag is-light\": !this.props.nm, \"tag is-white\": this.props.nm});\n        if (entity_type === \"Account\") {\n            return (\n                <span className={tagClasses}>\n                    <span className=\"icon\">\n                        <i className=\"fas fa-folder\"/>\n                    </span>\n                    {entity_type}\n                </span>\n            );\n        } else if (entity_type === \"Customer\") {\n            return (\n                <span className={tagClasses}>\n                    <span className=\"icon\">\n                        <i className=\"fas fa-users\"/>\n                    </span>\n                    {entity_type}\n                </span>\n            );\n        } else if (entity_type === \"Employee\") {\n            return (\n                <span className={tagClasses}>\n                    <span className=\"icon\">\n                        <i className=\"fas fa-suitcase\"/>\n                    </span>\n                    {entity_type}\n                </span>\n            );\n        } else if (entity_type === \"Branch\") {\n            return (\n                <span className={tagClasses}>\n                    <span className=\"icon\">\n                        <i className=\"fas fa-code-branch\"/>\n                    </span>\n                    {entity_type}\n                </span>\n            );\n        }\n    }\n\n    updatePageNumber(_, {activePage}) {\n        let pg = this.state.pageSize;\n        let slice = this.state.all_issues.slice(\n            pg * (activePage - 1),\n            pg * activePage\n        );\n        this.setState({issues: slice});\n    }\n\n\n}\n","import React, {Component} from \"react\";\nimport {DB} from \"../API\";\n// import ListIssues from \"./ListIssues\";\nimport HeaderComponent from \"./HeaderComponent\";\nimport ListIssues from \"./ListIssues\";\n\nexport default class GenesisComponent extends Component {\n    constructor() {\n        super();\n        this.state = {\n            project: \"\",\n            projectList: [],\n            nm: false\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            let projects = DB.projects;\n            if (projects)\n                this.setState({projectList: projects, project: projects[0]});\n        }, 1000);\n    }\n\n    render() {\n        const setProject = p => {\n            if (p) this.setState({project: p, visible: false});\n            else this.setState({visible: false});\n        };\n        const {nm, projectList, project} = this.state;\n        const darkClasses = nm ? \" has-background-grey-light has-text-light\" : \"\";\n        const darkTextClasses = nm ? \" has-text-light\" : \"\";\n\n        return (\n            <div className={\"has-navbar-fixed-top\"} style={{marginTop: \"70px\"}}>\n                <div className={\"container is-fluid\"  + darkClasses}>\n                    <div className=\"columns\">\n                        <div className=\"column is-one-fifth\">\n                            <aside className=\"menu\">\n                                <p className=\"menu-label\">\n                                    Projects\n                                </p>\n                                <ul className=\"menu-list\">\n                                    {projectList.length && (\n                                        projectList.map(p =>\n                                            <li onClick={() => setProject(p)}><a\n                                                className={p === project ? \"is-active\" : \"\"}>{p}</a></li>\n                                        )\n                                    ) || <div className=\"has-text-grey-light\"> Loading... </div>}\n                                </ul>\n                            </aside>\n                        </div>\n                        <div className=\"column\">\n                            {(project\n                                && <ListIssues project={project} nm={nm}/>)\n                            || <div className=\"has-text-grey-light\"> Loading... </div>}\n                        </div>\n                    </div>\n                </div>\n                <HeaderComponent night={_nm => this.setState({nm: _nm})}/>\n            </div>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport \"./styles.css\";\nimport GenesisComponent from \"./icms/GenesisComponent\";\n\n// import GenesisComponent from \"./icms/GenesisComponent\";\n\nexport default class App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            visible: true,\n            showICMS: false\n        };\n        this.openICMS = this.openICMS.bind(this);\n    }\n\n    openICMS() {\n        this.setState({showICMS: true});\n    }\n\n    render() {\n        if (this.state.showICMS) {\n            return <GenesisComponent/>;\n        }\n\n        return (\n            <div className=\"App has-text-centered\">\n                <h1 className=\"title is-1\">ICMS</h1>\n                <h2 className=\"title is-2\">Code Name: Beryllium</h2>\n                <h3 className=\"title is-3\">Let's see what this CSS framework has for you</h3>\n                <button onClick={this.openICMS} className=\"button is-outlined\">Open ICMS</button>\n                <p> Fun fact: <strong>Beryllium</strong> is named after a town Belur in Karnataka </p>\n            </div>\n        );\n    }\n}\n\nexport function classNames(classes) {\n    return Object.entries(classes)\n        .filter(([key, value]) => value)\n        .map(([key, value]) => key)\n        .join(' ');\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\n// TODO: Switch to https://github.com/palmerhq/the-platform#stylesheet when it will be stable\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/bulma@0.8.2/css/bulma.min.css\";\ndocument.head.appendChild(styleLink);\nconst fontAwesomeDep = document.createElement(\"link\");\nfontAwesomeDep.rel = \"stylesheet\";\nfontAwesomeDep.href = \"https://use.fontawesome.com/releases/v5.0.2/css/all.css\";\ndocument.head.appendChild(fontAwesomeDep);\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    rootElement\n);\n"],"sourceRoot":""}