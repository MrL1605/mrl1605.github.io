{"version":3,"sources":["API.js","icms/HeaderComponent.js","icms/DetailsComponent.js","icms/ListIssues.js","icms/GenesisComponent.js","App.js","index.js"],"names":["DB","axios","create","baseURL","responseType","get","then","content","data","HeaderComponent","props","_this","Object","classCallCheck","this","_super","call","state","nm","_this2","toggleNightMode","setState","night","react_default","a","createElement","Pane","height","minorScale","elevation","display","background","flex","Image","src","alt","majorScale","alignItems","onClick","window","location","reload","padding","IconButton","appearance","marginRight","icon","Component","DetailsComponent","contextRef","React","createRef","showTabs","activity","setTimeout","commentDetails","issue_comments","issueId","_this3","style","Link","color","goBack","project","Text","Icon","href","Spinner","marginX","marginY","ListIssues","issues","all_issues","asc_sort_order","pageSize","selectedIssue","lastVisitedIssue","updatePageNumber","bind","assertThisInitialized","selectIssue","updateIssuesList","updated_props","projectName","project_issues","activePage","_this4","length","DetailsComponent_DetailsComponent","issue_summary","Table","Head","SearchHeaderCell","TextHeaderCell","Body","map","ei","getRowFromIssue","className","arguments","undefined","each_issue","_this5","displayDate","Date","parseInt","updated_on","toLocaleString","timeZone","is_warning_issue","score","incident_id","Row","isSelectable","status","intent","key","onSelect","TextCell","Badge","getIconForEntityType","entity_type","entity_id","isNumber","summary","size","title","_","_ref","pg","slice","GenesisComponent","visible","removeSidebar","projectList","projects","updateSideBarState","visibility","setProject","p","_this$state","position","is","width","marginBottom","marginTop","ListIssues_ListIssues","getPlaceHolders","SideSheet","Position","LEFT","isShown","onCloseComplete","Menu","Item","Group","margin","top","HeaderComponent_HeaderComponent","_nm","App","showICMS","openICMS","GenesisComponent_GenesisComponent","Heading","Button","rootElement","document","getElementById","ReactDOM","render","StrictMode","App_App"],"mappings":"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","file":"static/js/main.9ede135c.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport let DB = {};\naxios\n    .create({\n        baseURL: \"https://raw.githubusercontent.com/MrL1605/demo/master/\",\n        responseType: \"json\"\n    })\n    .get(\"/large-db-v3.json\")\n    .then(content => {\n        DB = content.data;\n    });\n\n// https://raw.githubusercontent.com/MrL1605/demo/master/db.json\n// https://raw.githubusercontent.com/MrL1605/demo/master/large-db.json\n// https://raw.githubusercontent.com/MrL1605/demo/master/large-db-v3.json\n","import React, {Component} from \"react\";\nimport {IconButton, Image, majorScale, minorScale, Pane} from \"evergreen-ui\";\n\nexport default class HeaderComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {nm: false};\n    }\n\n    render() {\n        const toggleNightMode = () => {\n            this.setState({nm: !this.state.nm}, () => {\n                this.props.night(this.state.nm);\n            });\n        };\n\n        return (\n            <Pane height={minorScale(17)} elevation={3} display={\"flex\"}\n                  background={\"blueTint\"}>\n                {/* style={{position: \"fixed\", top: \"0\"}}>*/}\n                <Pane display=\"flex\" flex={1}>\n                    <Image src=\"https://github.com/MrL1605/demo/raw/master/assets/clari5_logo.png\"\n                           alt=\"Clari5 Logo\"\n                           height={majorScale(8)}\n                           alignItems=\"center\"\n                           onClick={() => {\n                               window.location.reload();\n                           }}\n                    />\n                </Pane>\n                <Pane padding={majorScale(2)}>\n                    {(this.state.nm && (\n                        <IconButton appearance={\"minimal\"} height={majorScale(5)} marginRight={minorScale(3)}\n                                    icon={\"moon\"} onClick={toggleNightMode}/>\n                    ) || (\n                        <IconButton appearance={\"minimal\"} height={majorScale(5)} marginRight={minorScale(3)}\n                                    icon={\"contrast\"} onClick={toggleNightMode}/>\n                    ))}\n                </Pane>\n            </Pane>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport {DB} from \"../API\";\nimport {Icon, Link, Pane, Spinner, Text} from \"evergreen-ui\";\n\nexport default class DetailsComponent extends Component {\n    contextRef = React.createRef();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showTabs: {\n                activity: true\n            }\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({commentDetails: DB.issue_comments[this.props.issueId]});\n        }, 3500);\n    }\n\n    render() {\n        const sT = this.state.showTabs;\n        const commentDetails = this.state.commentDetails;\n        const toggleTabActive = tabName => {\n            let updateST = sT;\n            updateST[tabName] = !updateST[tabName];\n            this.setState({showTabs: updateST});\n        };\n\n        return (\n            <div>\n                <Pane style={{padding: \"0 5%\"}}>\n                    <div>\n                        <div>\n                            <Link marginRight={12} color=\"blue\"\n                                  onClick={() => this.props.goBack()}>{this.props.project}</Link>\n                            <Text><Icon icon={\"slash\"}/></Text>\n                            <Link href=\"#\" marginRight={12}>{this.props.issueId}</Link>\n                            <Text><Icon icon={\"slash\"}/></Text>\n                            <Link href=\"#\" marginRight={12}>Incident Details</Link>\n                        </div>\n                    </div>\n\n\n                    {/*\n                    <Step.Group>\n                        <Step active>\n                            <Icon name=\"chart line\"/>\n                            <Step.Content>\n                                <Step.Title>Incident Details</Step.Title>\n                                <Step.Description>\n                                    Case details and incident details\n                                </Step.Description>\n                            </Step.Content>\n                        </Step>\n                        <Step>\n                            <Icon name=\"address card\"/>\n                            <Step.Content>\n                                <Step.Title>Evidence Details</Step.Title>\n                                <Step.Description>\n                                    Detailed Evidence for Incident\n                                </Step.Description>\n                            </Step.Content>\n                        </Step>\n                        <Step>\n                            <Icon name=\"sitemap\"/>\n                            <Step.Content>\n                                <Step.Title>Link Analysis</Step.Title>\n                                <Step.Description>Head over for linkage</Step.Description>\n                            </Step.Content>\n                        </Step>\n                    </Step.Group>\n*/}\n\n                    {/*\n                    <Grid floated=\"left\" columns={2}>\n                        <Grid.Column width={12}>\n                            <Ref innerRef={this.contextRef}>\n                                <Container fluid>\n                                     Big huge Case Details here\n                                    <CaseDetails\n                                        issueId={this.props.issueId}\n                                        issue_summary={this.props.issue_summary}\n                                        nm={this.props.nm}\n                                    />\n\n                                    <div>\n                                         Activity menu here\n                                        <Menu attached=\"top\" tabular style={{marginTop: \"1rem\"}}\n                                              inverted={this.props.nm}>\n                                            <Menu.Item\n                                                name=\"activity\"\n                                                color=\"brown\"\n                                                content={\n                                                    <h5>\n                                                        Activity\n                                                        <Icon\n                                                            name={\n                                                                \"caret \" + (sT[\"activity\"] ? \"down\" : \"right\")\n                                                            }\n                                                        />\n                                                    </h5>\n                                                }\n                                                active={sT[\"activity\"]}\n                                                onClick={() => {\n                                                    toggleTabActive(\"activity\");\n                                                }}\n                                                inverted={this.props.nm}\n                                            />\n                                        </Menu>\n                                        {sT[\"activity\"] && (\n                                            <Segment\n                                                color=\"brown\"\n                                                attached=\"bottom\"\n                                                inverted={this.props.nm}\n                                            >\n                                                {(commentDetails && (\n                                                    <ActivityComponent comments={commentDetails}/>\n                                                )) ||\n                                                this.getPlaceHolder()}\n                                            </Segment>\n                                        )}\n                                    </div>\n                                    <Rail position=\"right\" attached>\n                                        <Sticky\n                                            bottomOffset={300}\n                                            offset={0}\n                                            styleElement={{marginTop: \"60px\"}}\n                                            context={this.contextRef}\n                                        >\n                                            <Card inverted={this.props.nm}>\n                                                <Card.Content header=\"Pinned Details\"/>\n                                                <Card.Content\n                                                    description={\n                                                        <Item.Group relaxed>\n                                                            <Item>\n                                                                <Item.Content>\n                                                                    <Item.Header as=\"span\">Assignee</Item.Header>\n                                                                    <Item.Description>\n                                                                        <Image\n                                                                            src=\"https://react.semantic-ui.com/images/avatar/small/jenny.jpg\"\n                                                                            avatar\n                                                                            circular\n                                                                        />\n                                                                        Super Jenny\n                                                                    </Item.Description>\n                                                                </Item.Content>\n                                                            </Item>\n                                                            <Item>\n                                                                <Item.Content>\n                                                                    <Item.Header as=\"span\">\n                                                                        Risk Level\n                                                                    </Item.Header>\n                                                                    <Item.Description>L2</Item.Description>\n                                                                </Item.Content>\n                                                            </Item>\n\n                                                            <Item>\n                                                                <Item.Content>\n                                                                    <Item.Header as=\"span\">Priority</Item.Header>\n                                                                    <Item.Description>\n                                    <span className=\"ui red\">\n                                      <Icon\n                                          name=\"angle double up\"\n                                          color=\"red\"\n                                      />\n                                      Severe\n                                    </span>\n                                                                    </Item.Description>\n                                                                </Item.Content>\n                                                            </Item>\n                                                        </Item.Group>\n                                                    }\n                                                />\n                                                <Card.Content extra>\n                                                    <Icon name=\"comments\"/>4 Comments\n                                                </Card.Content>\n                                            </Card>\n                                        </Sticky>\n                                    </Rail>\n                                </Container>\n                            </Ref>\n                        </Grid.Column>\n                    </Grid>\n*/}\n                </Pane>\n            </div>\n        );\n    }\n\n    getPlaceHolder() {\n        return (\n            <Spinner marginX=\"auto\" marginY={120}/>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport {DB} from \"../API\";\nimport {Badge, Icon, minorScale, Pane, Table, Text} from \"evergreen-ui\";\nimport DetailsComponent from \"./DetailsComponent\";\n\nexport default class ListIssues extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            issues: [],\n            all_issues: [],\n            asc_sort_order: true,\n            pageSize: 20,\n            selectedIssue: \"\",\n            lastVisitedIssue: \"\"\n        };\n        this.updatePageNumber = this.updatePageNumber.bind(this);\n        this.selectIssue = this.selectIssue.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateIssuesList();\n    }\n\n    componentWillReceiveProps(updated_props) {\n        if (this.state.projectName !== updated_props.project) {\n            this.setState(\n                {selectedIssue: \"\", projectName: updated_props.project},\n                () => {\n                    this.updateIssuesList();\n                }\n            );\n        }\n    }\n\n    updateIssuesList() {\n        let project_issues = DB.issues[this.props.project];\n        if (project_issues) {\n            this.setState({all_issues: project_issues}, () => {\n                this.updatePageNumber(null, {activePage: 1});\n            });\n        } else {\n            this.setState({all_issues: []}, () => {\n                this.updatePageNumber(null, {activePage: 1});\n            });\n        }\n    }\n\n    render() {\n        const so = this.state.asc_sort_order ? \"ascending\" : \"descending\";\n        const totalPages = this.state.all_issues.length / this.state.pageSize;\n        const selectedIssue = this.state.selectedIssue;\n        let toggleSort = () => {\n            this.setState({asc_sort_order: !this.state.asc_sort_order});\n        };\n        if (selectedIssue)\n            return (\n                <DetailsComponent\n                    goBack={() => this.selectIssue(\"\")}\n                    issueId={selectedIssue}\n                    project={this.props.project}\n                    issue_summary={this.state.issue_summary}\n                    nm={this.props.nm}\n                />\n            );\n\n        return (\n            <Pane>\n                <Table>\n                    <Table.Head>\n                        <Table.SearchHeaderCell/>\n                        <Table.TextHeaderCell>Entity Type</Table.TextHeaderCell>\n                        <Table.TextHeaderCell>Entity Id</Table.TextHeaderCell>\n                        <Table.TextHeaderCell>Updated On</Table.TextHeaderCell>\n                        <Table.TextHeaderCell>Status</Table.TextHeaderCell>\n                        <Table.TextHeaderCell>Score</Table.TextHeaderCell>\n                        <Table.TextHeaderCell>Summary</Table.TextHeaderCell>\n                    </Table.Head>\n                    <Table.Body height={\"100%\"}>\n                        {this.state.issues.map(ei => this.getRowFromIssue(ei))}\n                    </Table.Body>\n                </Table>\n                <div className=\"\">\n                    {/*\n                    <Pagination\n                        inverted={this.props.nm}\n                        onPageChange={this.updatePageNumber}\n                        defaultActivePage={1}\n                        ellipsisItem={{\n                            content: <Icon name=\"ellipsis horizontal\"/>,\n                            icon: true\n                        }}\n                        boundaryRange={0}\n                        siblingRange={1}\n                        firstItem={{\n                            content: <Icon name=\"angle double left\"/>,\n                            icon: true\n                        }}\n                        lastItem={{\n                            content: <Icon name=\"angle double right\"/>,\n                            icon: true\n                        }}\n                        prevItem={{content: <Icon name=\"angle left\"/>, icon: true}}\n                        nextItem={{content: <Icon name=\"angle right\"/>, icon: true}}\n                        totalPages={totalPages}\n                    />\n*/}\n                </div>\n            </Pane>\n        );\n    }\n\n    selectIssue(issueId, issue_summary = {}) {\n        if (!issueId) this.setState({selectedIssue: issueId, issue_summary: {}});\n        else\n            this.setState({\n                selectedIssue: issueId,\n                issue_summary: issue_summary,\n                lastVisitedIssue: issueId\n            });\n    }\n\n    getRowFromIssue(each_issue) {\n        const displayDate = new Date(\n            parseInt(each_issue.updated_on)\n        ).toLocaleString(\"en-IN\", {timeZone: \"UTC\"});\n        const is_warning_issue = parseInt(each_issue.score) >= 700;\n        const is_last_visited =\n            this.state.lastVisitedIssue === each_issue.incident_id;\n\n        return (\n            <Table.Row\n                isSelectable={each_issue.status !== \"Closed\"}\n                intent={is_warning_issue ? \"warning\" : \"none\"}\n                // inverted={this.props.nm}\n                key={\"incident_\" + each_issue.incident_id}\n                onSelect={() => this.selectIssue(each_issue.incident_id, each_issue)}\n            >\n                <Table.TextCell>\n                    <Badge color={\"purple\"}>\n                        {each_issue.incident_id}\n                    </Badge>\n                </Table.TextCell>\n                <Table.TextCell>\n                    {this.getIconForEntityType(each_issue.entity_type)}\n                </Table.TextCell>\n                <Table.TextCell>{each_issue.entity_id}</Table.TextCell>\n                <Table.TextCell> {displayDate} </Table.TextCell>\n                <Table.TextCell>{each_issue.status}</Table.TextCell>\n                <Table.TextCell isNumber>\n                    {is_warning_issue && <Icon icon=\"warning-sign\"/>} {each_issue.score}\n                </Table.TextCell>\n                <Table.TextCell>{each_issue.summary}</Table.TextCell>\n            </Table.Row>\n        );\n    }\n\n    getIconForEntityType(entity_type) {\n        if (entity_type === \"Account\") {\n            return (\n                <Badge color={\"neutral\"}>\n                    <Text size={300}>\n                        <Icon icon=\"folder-close\" marginRight={minorScale(1)}\n                              size={minorScale(3)} title={entity_type}/>\n                        {entity_type}\n                    </Text>\n                </Badge>\n            );\n        } else if (entity_type === \"Customer\") {\n            return (\n                // <Badge color={\"neutral\"}>\n                <Badge>\n                    <Text size={300}>\n                        <Icon icon=\"person\" marginRight={minorScale(1)}\n                              size={minorScale(3)} title={entity_type}/>\n                        {entity_type}\n                    </Text>\n                </Badge>\n            );\n        } else if (entity_type === \"Employee\") {\n            return (\n                <Badge>\n                    <Text size={300}>\n                        <Icon icon=\"briefcase\" marginRight={minorScale(1)}\n                              size={minorScale(3)} title={entity_type}/>\n                        {entity_type}\n                    </Text>\n                </Badge>\n            );\n        } else if (entity_type === \"Branch\") {\n            return (\n                <Badge>\n                    <Text size={300}>\n                        <Icon icon=\"git-branch\" marginRight={minorScale(1)}\n                              size={minorScale(3)} title={entity_type}/>\n                        {entity_type}\n                    </Text>\n                </Badge>\n            );\n        }\n    }\n\n    updatePageNumber(_, {activePage}) {\n        let pg = this.state.pageSize;\n        let slice = this.state.all_issues.slice(\n            pg * (activePage - 1),\n            pg * activePage\n        );\n        this.setState({issues: slice});\n    }\n}\n","import React, {Component} from \"react\";\nimport {DB} from \"../API\";\nimport HeaderComponent from \"./HeaderComponent\";\nimport {Icon, IconButton, majorScale, Menu, minorScale, Pane, Position, SideSheet, Spinner} from \"evergreen-ui\";\nimport ListIssues from \"./ListIssues\";\n\nexport default class GenesisComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false,\n            removeSidebar: true,\n            project: \"\",\n            projectList: [],\n            nm: false\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            let projects = DB.projects;\n            if (projects)\n                this.setState({projectList: projects, project: projects[0]});\n        }, 1000);\n    }\n\n    render() {\n        const updateSideBarState = visibility => {\n            if (visibility) this.setState({visible: true});\n            else this.setState({visible: false});\n        };\n        const setProject = p => {\n            if (p) this.setState({project: p, visible: false});\n            else this.setState({visible: false});\n        };\n        const {projectList, project, visible, removeSidebar} = this.state;\n\n        return (\n            <div style={{height: \"100%\", position: \"relative\"}}>\n\n                <Pane is=\"section\"\n                      padding={majorScale(10)}\n                      style={{position: \"absolute\", width: \"100%\", marginBottom: \"0\"}}>\n                    <div style={{marginTop: minorScale(18)}}/>\n                    {(project\n                        && <ListIssues project={project} nm={this.state.nm}/>)\n                    || this.getPlaceHolders()}\n                </Pane>\n\n\n                <SideSheet position={Position.LEFT} isShown={visible} width={majorScale(40)}\n                           onCloseComplete={() => updateSideBarState(false)}>\n                    {projectList.length && (\n                        <Menu>\n                            <Menu.Item height={majorScale(8)} marginTop={majorScale(10)}\n                                       onClick={() => setProject(\"\")}>\n                                <Icon marginRight={minorScale(3)} icon=\"inbox-search\"/> Search\n                            </Menu.Item>\n                            <Menu.Group title={\"Projects\"}>\n                                {projectList.map(p => (\n                                    <Menu.Item key={p} height={majorScale(8)}\n                                               background={p === project ? \"purpleTint\" : \"default\"}\n                                               onSelect={() => setProject(p)}>\n                                        {p}\n                                    </Menu.Item>\n                                ))}\n                            </Menu.Group>\n                        </Menu>\n                    ) || this.getPlaceHolders()}\n                </SideSheet>\n\n                <IconButton icon={\"menu-open\"} appearance={\"minimal\"} margin={majorScale(2)}\n                            style={{position: \"fixed\", top: \"10%\"}}\n                            onClick={() => updateSideBarState(true)}/>\n\n\n                {/*\n                <Sidebar.Pushable\n                    as={Segment}\n                    style={{\n                        marginTop: \"0\",\n                        background: \"none\",\n                        border: 0,\n                        height: removeSidebar ? \"0\" : \"100%\",\n                        width: removeSidebar ? \"0\" : \"100%\",\n                        position: \"absolute\"\n                    }}\n                >\n                    {projectList.length && (\n                        <Sidebar\n                            as={Menu}\n                            animation=\"overlay\"\n                            icon=\"labeled\"\n                            inverted\n                            onHidden={() => removeSideNow()}\n                            // onHide={() => updateSideBarState(false)}\n                            vertical\n                            visible={visible}\n                            width=\"thin\"\n                        >\n                            <div style={{marginTop: \"50px\"}}/>\n                            <Menu.Item as=\"a\" onClick={() => setProject(\"\")}>\n                                <Icon name=\"search\"/>\n                                Search\n                            </Menu.Item>\n                            {projectList.map(p => (\n                                <Menu.Item key={p} as=\"a\" onClick={() => setProject(p)}>\n                                    {p}\n                                </Menu.Item>\n                            ))}\n                            <Menu.Item as=\"a\" onClick={() => setProject(\"\")}>\n                                <Icon name=\"arrow left\"/>\n                                Go Back\n                            </Menu.Item>\n                        </Sidebar>\n                    )}\n                </Sidebar.Pushable>\n*/}\n                <HeaderComponent night={_nm => this.setState({nm: _nm})}/>\n            </div>\n        );\n    }\n\n    getPlaceHolders() {\n        return (\n            <Spinner marginX=\"auto\" marginY={120}/>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport \"./styles.css\";\nimport {Button, Heading, majorScale} from \"evergreen-ui\";\nimport GenesisComponent from \"./icms/GenesisComponent\";\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: true,\n            showICMS: false\n        };\n        this.openICMS = this.openICMS.bind(this);\n    }\n\n    openICMS() {\n        this.setState({showICMS: true});\n    }\n\n    render() {\n        if (this.state.showICMS) {\n            return <GenesisComponent/>;\n        }\n\n        return (\n            <div className=\"App\">\n                <Heading size={900} marginTop={majorScale(4)}>ICMS</Heading>\n                <Heading size={700} marginTop=\"default\">Code Name: Germanium</Heading>\n                <Heading size={500} marginTop=\"default\">Let's see what this CSS framework has for you</Heading>\n                <Button marginTop={majorScale(5)} height={majorScale(5)} appearance={\"primary\"} onClick={this.openICMS}>Open\n                    ICMS</Button>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\n// TODO: Switch to https://github.com/palmerhq/the-platform#stylesheet when it will be stable\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    rootElement\n);\n"],"sourceRoot":""}