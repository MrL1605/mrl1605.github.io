{
  "version": 3,
  "sources": [
    "API.js",
    "icms/details/CaseDetails.js",
    "icms/details/ActivityComponent.js",
    "icms/DetailsComponent.js",
    "icms/ListIssues.js",
    "icms/HeaderComponent.js",
    "icms/GenesisComponent.js",
    "App.js",
    "index.js"
  ],
  "names": [
    "DB",
    "axios",
    "create",
    "baseURL",
    "responseType",
    "get",
    "then",
    "content",
    "data",
    "CaseDetails",
    "props",
    "_this",
    "Object",
    "classCallCheck",
    "this",
    "_super",
    "call",
    "state",
    "showTabs",
    "case",
    "incident",
    "popupContent",
    "_this2",
    "setTimeout",
    "issue_details",
    "setState",
    "issueId",
    "_this3",
    "sT",
    "iDetails",
    "iSummary",
    "issue_summary",
    "toggleTabActive",
    "tabName",
    "updateST",
    "confirmPopup",
    "react_default",
    "a",
    "createElement",
    "Menu",
    "attached",
    "tabular",
    "inverted",
    "nm",
    "Item",
    "name",
    "color",
    "Icon",
    "active",
    "onClick",
    "Segment",
    "Grid",
    "columns",
    "Row",
    "Column",
    "Table",
    "definition",
    "Body",
    "Cell",
    "case_id",
    "case_entity_id",
    "getIconForEntityType",
    "case_entity_type",
    "Divider",
    "hidden",
    "case_assignee_id",
    "case_status",
    "getPlaceHolder",
    "position",
    "Button",
    "icon",
    "primary",
    "loading",
    "downloadButtonState",
    "secondary",
    "labelPosition",
    "concat",
    "Label",
    "size",
    "entity_type",
    "entity_id",
    "score",
    "getIconForPriority",
    "priority",
    "assignee",
    "getIconForFraud",
    "indication_fraud",
    "status",
    "style",
    "paddingTop",
    "risk_level",
    "scenario_id",
    "incident_detail",
    "Confirm",
    "open",
    "header",
    "onCancel",
    "onConfirm",
    "Placeholder",
    "marginLeft",
    "Header",
    "image",
    "Line",
    "Paragraph",
    "p",
    "_if",
    "Component",
    "ActivityComponent",
    "showLast",
    "activeTab",
    "aT",
    "comments",
    "slice",
    "length",
    "updateTab",
    "pointing",
    "basic",
    "Comment",
    "Group",
    "threaded",
    "map",
    "c",
    "key",
    "comment_on",
    "comment_by",
    "Avatar",
    "as",
    "src",
    "_comment",
    "profile_photo",
    "Content",
    "Author",
    "Metadata",
    "d",
    "Date",
    "parseInt",
    "toLocaleString",
    "timeZone",
    "Text",
    "message",
    "Actions",
    "Form",
    "reply",
    "TextArea",
    "DetailsComponent",
    "contextRef",
    "React",
    "createRef",
    "activity",
    "commentDetails",
    "issue_comments",
    "Ref",
    "Container",
    "fluid",
    "padding",
    "Breadcrumb",
    "Section",
    "link",
    "goBack",
    "project",
    "Step",
    "Title",
    "Description",
    "floated",
    "width",
    "innerRef",
    "CaseDetails_CaseDetails",
    "marginTop",
    "ActivityComponent_ActivityComponent",
    "Rail",
    "Sticky",
    "bottomOffset",
    "offset",
    "styleElement",
    "context",
    "Card",
    "description",
    "relaxed",
    "Image",
    "avatar",
    "circular",
    "className",
    "extra",
    "ListIssues",
    "issues",
    "all_issues",
    "asc_sort_order",
    "pageSize",
    "selectedIssue",
    "lastVisitedIssue",
    "updatePageNumber",
    "bind",
    "assertThisInitialized",
    "selectIssue",
    "updateIssuesList",
    "updated_props",
    "projectName",
    "project_issues",
    "activePage",
    "_this4",
    "so",
    "totalPages",
    "DetailsComponent_DetailsComponent",
    "celled",
    "selectable",
    "sortable",
    "compact",
    "singleLine",
    "HeaderCell",
    "ei",
    "getRowFromIssue",
    "Pagination",
    "onPageChange",
    "defaultActivePage",
    "ellipsisItem",
    "boundaryRange",
    "siblingRange",
    "firstItem",
    "lastItem",
    "prevItem",
    "nextItem",
    "arguments",
    "undefined",
    "each_issue",
    "_this5",
    "displayDate",
    "updated_on",
    "is_warning_issue",
    "is_last_visited",
    "incident_id",
    "disabled",
    "ribbon",
    "summary",
    "_",
    "_ref",
    "pg",
    "HeaderComponent",
    "zIndex",
    "alt",
    "verticalAlign",
    "bordered",
    "window",
    "location",
    "reload",
    "night",
    "GenesisComponent",
    "visible",
    "removeSidebar",
    "projectList",
    "listContentRef",
    "projects",
    "setProject",
    "_this$state",
    "height",
    "marginBottom",
    "ListIssues_ListIssues",
    "getPlaceHolders",
    "Popup",
    "trigger",
    "visibility",
    "data-content",
    "Sidebar",
    "Pushable",
    "background",
    "border",
    "animation",
    "onHidden",
    "vertical",
    "HeaderComponent_HeaderComponent",
    "_nm",
    "padded",
    "margin",
    "App",
    "showICMS",
    "openICMS",
    "GenesisComponent_GenesisComponent",
    "styleLink",
    "document",
    "rel",
    "href",
    "head",
    "appendChild",
    "rootElement",
    "getElementById",
    "ReactDOM",
    "render",
    "StrictMode",
    "App_App"
  ],
  "mappings": "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",
  "file": "static/js/main.36bc8b41.chunk.js",
  "sourcesContent": [
    "import axios from \"axios\";\n\nexport let DB = {};\naxios\n    .create({\n        baseURL: \"https://raw.githubusercontent.com/MrL1605/demo/master/\",\n        responseType: \"json\"\n    })\n    .get(\"/large-db-v3.json\")\n    .then(content => {\n        DB = content.data;\n    });\n\n// https://raw.githubusercontent.com/MrL1605/demo/master/db.json\n// https://raw.githubusercontent.com/MrL1605/demo/master/large-db.json\n// https://raw.githubusercontent.com/MrL1605/demo/master/large-db-v3.json\n",
    "import React, {Component} from \"react\";\nimport {\n    Menu,\n    Icon,\n    Segment,\n    Placeholder,\n    Grid,\n    Divider,\n    Table,\n    Label,\n    Button,\n    Confirm\n} from \"semantic-ui-react\";\nimport {DB} from \"../../API\";\n\nexport default class CaseDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showTabs: {\n                case: true,\n                incident: true\n            },\n            popupContent: \"\"\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            if (DB.issue_details) {\n                this.setState({issue_details: DB.issue_details[this.props.issueId]});\n            }\n        }, 2000);\n    }\n\n    render() {\n        const sT = this.state.showTabs;\n        const iDetails = this.state.issue_details;\n        const iSummary = this.props.issue_summary;\n        const toggleTabActive = tabName => {\n            let updateST = sT;\n            updateST[tabName] = !updateST[tabName];\n            this.setState({showTabs: updateST});\n        };\n        const confirmPopup = content => {\n            this.setState({popupContent: content});\n        };\n        const downloadButtonLoading = () => {\n            this.setState({downloadButtonState: 1});\n            setTimeout(() => {\n                this.setState({downloadButtonState: 0});\n            }, 2000);\n        };\n\n        return (\n            <div>\n                <Menu attached=\"top\" tabular inverted={this.props.nm}>\n                    <Menu.Item\n                        name=\"case\"\n                        color=\"brown\"\n                        content={\n                            <h5>\n                                Case Details\n                                <Icon name={\"caret \" + (sT[\"case\"] ? \"down\" : \"right\")}/>\n                            </h5>\n                        }\n                        active={sT[\"case\"]}\n                        onClick={() => {\n                            toggleTabActive(\"case\");\n                        }}\n                    />\n                </Menu>\n                {sT[\"case\"] && (\n                    <Segment attached=\"bottom\" color=\"brown\" inverted={this.props.nm}>\n                        {(iDetails && (\n                            <Grid columns={2}>\n                                <Grid.Row>\n                                    <Grid.Column>\n                                        <Table definition inverted={this.props.nm}>\n                                            <Table.Body>\n                                                <Table.Row>\n                                                    <Table.Cell>Case Id</Table.Cell>\n                                                    <Table.Cell>{iDetails.case_id}</Table.Cell>\n                                                </Table.Row>\n                                                <Table.Row>\n                                                    <Table.Cell>Case Entity Id</Table.Cell>\n                                                    <Table.Cell>{iDetails.case_entity_id}</Table.Cell>\n                                                </Table.Row>\n                                                <Table.Row>\n                                                    <Table.Cell>Case Entity Type</Table.Cell>\n                                                    <Table.Cell>\n                                                        {this.getIconForEntityType(\n                                                            iDetails.case_entity_type\n                                                        )}\n                                                    </Table.Cell>\n                                                </Table.Row>\n                                            </Table.Body>\n                                        </Table>\n                                    </Grid.Column>\n                                    <Divider hidden/>\n                                    <Grid.Column>\n                                        <Table definition inverted={this.props.nm}>\n                                            <Table.Body>\n                                                <Table.Row>\n                                                    <Table.Cell>Assignee Id</Table.Cell>\n                                                    <Table.Cell>{iDetails.case_assignee_id}</Table.Cell>\n                                                </Table.Row>\n                                                <Table.Row>\n                                                    <Table.Cell>Status</Table.Cell>\n                                                    <Table.Cell>{iDetails.case_status}</Table.Cell>\n                                                </Table.Row>\n                                                <Table.Row>\n                                                    <Table.Cell>Resolution</Table.Cell>\n                                                    <Table.Cell> - </Table.Cell>\n                                                </Table.Row>\n                                            </Table.Body>\n                                        </Table>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                        )) ||\n                        this.getPlaceHolder()}\n                    </Segment>\n                )}\n                <Menu attached=\"top\" tabular inverted={this.props.nm}>\n                    <Menu.Item\n                        name=\"incident\"\n                        color=\"brown\"\n                        content={\n                            <h5>\n                                Incident Details\n                                <Icon name={\"caret \" + (sT[\"incident\"] ? \"down\" : \"right\")}/>\n                            </h5>\n                        }\n                        active={sT[\"incident\"]}\n                        onClick={() => {\n                            toggleTabActive(\"incident\");\n                        }}\n                    />\n                    <Menu.Menu position=\"right\">\n                        <Menu.Item\n                            name=\"download\"\n                            content={\n                                <Button\n                                    icon\n                                    primary\n                                    loading={this.state.downloadButtonState === 1}\n                                    onClick={() => downloadButtonLoading()}\n                                    inverted={this.props.nm}\n                                >\n                                    <Icon name=\"cloud download\"/>\n                                </Button>\n                            }\n                        />\n                        <Menu.Item\n                            name=\"assign\"\n                            content={\n                                <Button\n                                    icon\n                                    secondary\n                                    labelPosition=\"left\"\n                                    onClick={() =>\n                                        confirmPopup(`Confirm to assign [${iDetails.case_id}]`)\n                                    }\n                                    inverted={this.props.nm}\n                                >\n                                    <Icon name=\"angle double right\"/>\n                                    Assign Incident\n                                </Button>\n                            }\n                        />\n                        <Menu.Item\n                            name=\"close\"\n                            content={\n                                <Button\n                                    icon\n                                    labelPosition=\"right\"\n                                    onClick={() =>\n                                        confirmPopup(`Confirm to close [${iDetails.case_id}] case`)\n                                    }\n                                    inverted={this.props.nm}\n                                >\n                                    <Icon name=\"archive\"/> Close Incident\n                                </Button>\n                            }\n                        />\n                    </Menu.Menu>\n                </Menu>\n                {sT[\"incident\"] && (\n                    <Segment attached=\"bottom\" color=\"brown\" inverted={this.props.nm}>\n                        {(iDetails && (\n                            <Grid inverted={this.props.nm}>\n                                <Grid.Row columns={2}>\n                                    <Grid.Column>\n                                        <Table definition inverted={this.props.nm}>\n                                            <Table.Body>\n                                                <Table.Row>\n                                                    <Table.Cell>Incident Id</Table.Cell>\n                                                    <Table.Cell>\n                                                        <Label size=\"small\" color=\"violet\">\n                                                            {this.props.issueId}\n                                                        </Label>\n                                                    </Table.Cell>\n                                                </Table.Row>\n                                                <Table.Row>\n                                                    <Table.Cell>Incident Entity Type</Table.Cell>\n                                                    <Table.Cell>\n                                                        {this.getIconForEntityType(iSummary.entity_type)}\n                                                    </Table.Cell>\n                                                </Table.Row>\n                                                <Table.Row>\n                                                    <Table.Cell>Incident Entity Id</Table.Cell>\n                                                    <Table.Cell> {iSummary.entity_id} </Table.Cell>\n                                                </Table.Row>\n                                                <Table.Row>\n                                                    <Table.Cell>Incident Score</Table.Cell>\n                                                    <Table.Cell> {iSummary.score} </Table.Cell>\n                                                </Table.Row>\n                                                <Table.Row>\n                                                    <Table.Cell>Priority</Table.Cell>\n                                                    {this.getIconForPriority(iDetails.priority)}\n                                                </Table.Row>\n                                            </Table.Body>\n                                        </Table>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Table definition inverted={this.props.nm}>\n                                            <Table.Body>\n                                                <Table.Row>\n                                                    <Table.Cell>Assignee</Table.Cell>\n                                                    <Table.Cell>{iDetails.assignee}</Table.Cell>\n                                                </Table.Row>\n                                                <Table.Row>\n                                                    <Table.Cell>Indication of Fraud</Table.Cell>\n                                                    {this.getIconForFraud(iDetails.indication_fraud)}\n                                                </Table.Row>\n                                                <Table.Row>\n                                                    <Table.Cell>Status</Table.Cell>\n                                                    <Table.Cell>{iSummary.status}</Table.Cell>\n                                                </Table.Row>\n                                            </Table.Body>\n                                        </Table>\n                                    </Grid.Column>\n                                </Grid.Row>\n                                <Grid.Row columns={1} style={{paddingTop: \"0\"}}>\n                                    <Grid.Column>\n                                        <Table definition inverted={this.props.nm}>\n                                            <Table.Body>\n                                                <Table.Row>\n                                                    <Table.Cell>Risk Level</Table.Cell>\n                                                    <Table.Cell>{iDetails.risk_level}</Table.Cell>\n                                                </Table.Row>\n                                                <Table.Row>\n                                                    <Table.Cell>Scenario ID</Table.Cell>\n                                                    <Table.Cell>{iDetails.scenario_id}</Table.Cell>\n                                                </Table.Row>\n                                                <Table.Row>\n                                                    <Table.Cell>Incident Detail</Table.Cell>\n                                                    <Table.Cell>{iDetails.incident_detail}</Table.Cell>\n                                                </Table.Row>\n                                            </Table.Body>\n                                        </Table>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                        )) ||\n                        this.getPlaceHolder()}\n                    </Segment>\n                )}\n\n                <Confirm\n                    open={!!this.state.popupContent}\n                    header=\"Are you sure?\"\n                    content={this.state.popupContent}\n                    onCancel={() => confirmPopup(\"\")}\n                    onConfirm={() => confirmPopup(\"\")}\n                    inverted={this.props.nm}\n                />\n            </div>\n        );\n    }\n\n    getPlaceHolder() {\n        return (\n            <Placeholder style={{marginLeft: \"50px\"}} inverted={this.props.nm}>\n                <Placeholder.Header image>\n                    <Placeholder.Line/>\n                    <Placeholder.Line/>\n                </Placeholder.Header>\n                <Placeholder.Paragraph>\n                    <Placeholder.Line/>\n                    <Placeholder.Line/>\n                    <Placeholder.Line/>\n                    <Placeholder.Line/>\n                </Placeholder.Paragraph>\n            </Placeholder>\n        );\n    }\n\n    getIconForPriority(p) {\n        if (p === \"Severe\")\n            return (\n                <Table.Cell>\n                    <Icon name=\"angle double up\" color=\"red\"/>\n                    {p}\n                </Table.Cell>\n            );\n        else if (p === \"Major\")\n            return (\n                <Table.Cell>\n                    <Icon name=\"angle up\" color=\"red\"/>\n                    {p}\n                </Table.Cell>\n            );\n        else if (p === \"Minor\")\n            return (\n                <Table.Cell>\n                    <Icon name=\"angle down\" color=\"green\"/>\n                    {p}\n                </Table.Cell>\n            );\n    }\n\n    getIconForFraud(_if) {\n        if (_if)\n            return (\n                <Table.Cell>\n                    <Icon name=\"check\" color=\"red\"/> Yes\n                </Table.Cell>\n            );\n        else\n            return (\n                <Table.Cell>\n                    <Icon name=\"x\" color=\"green\"/> No\n                </Table.Cell>\n            );\n    }\n\n    getIconForEntityType(entity_type) {\n        if (entity_type === \"Account\") {\n            return (\n                <Label image color={this.props.nm ? \"black\" : \"default\"}>\n                    <Icon name=\"folder outline\"/> {entity_type}\n                </Label>\n            );\n        } else if (entity_type === \"Customer\") {\n            return (\n                <Label image color={this.props.nm ? \"black\" : \"default\"}>\n                    <Icon name=\"users\"/>\n                    {entity_type}\n                </Label>\n            );\n        } else if (entity_type === \"Employee\") {\n            return (\n                <Label image color={this.props.nm ? \"black\" : \"default\"}>\n                    <Icon name=\"suitcase\"/>\n                    {entity_type}\n                </Label>\n            );\n        } else if (entity_type === \"Branch\") {\n            return (\n                <Label image color={this.props.nm ? \"black\" : \"default\"}>\n                    <Icon name=\"code branch\"/>\n                    {entity_type}\n                </Label>\n            );\n        }\n    }\n}\n",
    "import React, {Component} from \"react\";\nimport {\n    Menu,\n    Segment,\n    Comment,\n    Header,\n    Form,\n    Button,\n    Icon\n} from \"semantic-ui-react\";\n\nexport default class ActivityComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showLast: 3,\n            activeTab: \"comments\"\n        };\n    }\n\n    render() {\n        const aT = this.state.activeTab;\n        const comments = this.props.comments.slice(\n            this.props.comments.length - this.state.showLast\n        );\n        const updateTab = tabName => {\n            this.setState({activeTab: tabName});\n        };\n        const displayDate = d =>\n            new Date(parseInt(d)).toLocaleString(\"en-IN\", {timeZone: \"UTC\"});\n        const getPrfileUrl = _comment => {\n            return (\n                \"https://randomuser.me/api/portraits/women/\" +\n                _comment.profile_photo +\n                \".jpg\"\n            );\n        };\n\n        return (\n            <div>\n                <Menu pointing secondary>\n                    <Menu.Item\n                        name=\"comments\"\n                        active={aT === \"comments\"}\n                        content={\n                            <span>\n                <Icon name=\"comments\"/> Comments\n              </span>\n                        }\n                        onClick={() => updateTab(\"comments\")}\n                    />\n                    <Menu.Item\n                        name=\"attachments\"\n                        active={aT === \"attachments\"}\n                        content={\n                            <span>\n                <Icon name=\"paperclip\"/> Attachments\n              </span>\n                        }\n                        onClick={() => updateTab(\"attachments\")}\n                    />\n                    <Menu.Item\n                        name=\"audit\"\n                        active={aT === \"audit\"}\n                        content={\n                            <span>\n                <Icon name=\"history\"/> History\n              </span>\n                        }\n                        onClick={() => updateTab(\"audit\")}\n                    />\n                </Menu>\n\n                <Segment basic>\n                    <Comment.Group threaded>\n                        {comments.map(c => (\n                            <Comment key={\"c\" + c.comment_on + \"-\" + c.comment_by}>\n                                <Comment.Avatar as=\"a\" src={getPrfileUrl(c)}/>\n                                <Comment.Content>\n                                    <Comment.Author as=\"a\"> {c.comment_by} </Comment.Author>\n                                    <Comment.Metadata>\n                                        <span> {displayDate(c.comment_on)} </span>\n                                    </Comment.Metadata>\n                                    <Comment.Text>{c.message}</Comment.Text>\n                                    <Comment.Actions>\n                                        <a>Reply</a>\n                                    </Comment.Actions>\n                                </Comment.Content>\n                            </Comment>\n                        ))}\n\n                        <Comment>\n                            <Comment.Avatar\n                                as=\"a\"\n                                src=\"https://react.semantic-ui.com/images/avatar/small/elliot.jpg\"\n                            />\n                            <Comment.Content>\n                                <Comment.Author as=\"a\">Elliot Fu</Comment.Author>\n                                <Comment.Metadata>\n                                    <span>Yesterday at 12:30AM</span>\n                                </Comment.Metadata>\n                                <Comment.Text>\n                                    <p>\n                                        This has been very useful for my research. Thanks as well!\n                                    </p>\n                                </Comment.Text>\n                                <Comment.Actions>\n                                    <a>Reply</a>\n                                </Comment.Actions>\n                            </Comment.Content>\n\n                            <Comment.Group>\n                                <Comment>\n                                    <Comment.Avatar\n                                        as=\"a\"\n                                        src=\"https://react.semantic-ui.com/images/avatar/small/jenny.jpg\"\n                                    />\n                                    <Comment.Content>\n                                        <Comment.Author as=\"a\">Jenny Hess</Comment.Author>\n                                        <Comment.Metadata>\n                                            <span>Just now</span>\n                                        </Comment.Metadata>\n                                        <Comment.Text>\n                                            Elliot you are always so right :)\n                                        </Comment.Text>\n                                        <Comment.Actions>\n                                            <a>Reply</a>\n                                        </Comment.Actions>\n                                    </Comment.Content>\n                                </Comment>\n                            </Comment.Group>\n                        </Comment>\n\n                        <Form reply>\n                            <Form.TextArea/>\n                            <Button\n                                labelPosition=\"left\"\n                                content=\"Add Comment\"\n                                icon=\"edit\"\n                                primary\n                                onClick={() => {\n                                }}\n                            />\n                        </Form>\n                    </Comment.Group>\n                </Segment>\n            </div>\n        );\n    }\n}\n",
    "import React, {Component} from \"react\";\nimport {\n    Breadcrumb,\n    Card,\n    Container,\n    Grid,\n    Icon,\n    Image,\n    Item,\n    Menu,\n    Placeholder,\n    Rail,\n    Ref,\n    Segment,\n    Step,\n    Sticky\n} from \"semantic-ui-react\";\nimport CaseDetails from \"./details/CaseDetails\";\nimport {DB} from \"../API\";\nimport ActivityComponent from \"./details/ActivityComponent\";\n\nexport default class DetailsComponent extends Component {\n    contextRef = React.createRef();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showTabs: {\n                activity: true\n            }\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({commentDetails: DB.issue_comments[this.props.issueId]});\n        }, 3500);\n    }\n\n    render() {\n        const sT = this.state.showTabs;\n        const commentDetails = this.state.commentDetails;\n        const toggleTabActive = tabName => {\n            let updateST = sT;\n            updateST[tabName] = !updateST[tabName];\n            this.setState({showTabs: updateST});\n        };\n\n        return (\n            <Ref>\n                <Container fluid style={{padding: \"0 5%\"}}>\n                    <div>\n                        <Breadcrumb>\n                            <Breadcrumb.Section link onClick={() => this.props.goBack()}>\n                                {this.props.project}\n                            </Breadcrumb.Section>\n                            <Breadcrumb.Divider icon=\"right chevron\"/>\n                            <Breadcrumb.Section link>{this.props.issueId}</Breadcrumb.Section>\n                            <Breadcrumb.Divider icon=\"right chevron\"/>\n                            <Breadcrumb.Section active>Incident Details</Breadcrumb.Section>\n                        </Breadcrumb>\n                    </div>\n\n                    <Step.Group>\n                        <Step active>\n                            <Icon name=\"chart line\"/>\n                            <Step.Content>\n                                <Step.Title>Incident Details</Step.Title>\n                                <Step.Description>\n                                    Case details and incident details\n                                </Step.Description>\n                            </Step.Content>\n                        </Step>\n                        <Step>\n                            <Icon name=\"address card\"/>\n                            <Step.Content>\n                                <Step.Title>Evidence Details</Step.Title>\n                                <Step.Description>\n                                    Detailed Evidence for Incident\n                                </Step.Description>\n                            </Step.Content>\n                        </Step>\n                        <Step>\n                            <Icon name=\"sitemap\"/>\n                            <Step.Content>\n                                <Step.Title>Link Analysis</Step.Title>\n                                <Step.Description>Head over for linkage</Step.Description>\n                            </Step.Content>\n                        </Step>\n                    </Step.Group>\n\n                    <Grid floated=\"left\" columns={2}>\n                        <Grid.Column width={12}>\n                            <Ref innerRef={this.contextRef}>\n                                <Container fluid>\n                                    {/* Big huge Case Details here  */}\n                                    <CaseDetails\n                                        issueId={this.props.issueId}\n                                        issue_summary={this.props.issue_summary}\n                                        nm={this.props.nm}\n                                    />\n\n                                    <div>\n                                        {/* Activity menu here  */}\n                                        <Menu attached=\"top\" tabular style={{marginTop: \"1rem\"}}\n                                              inverted={this.props.nm}>\n                                            <Menu.Item\n                                                name=\"activity\"\n                                                color=\"brown\"\n                                                content={\n                                                    <h5>\n                                                        Activity\n                                                        <Icon\n                                                            name={\n                                                                \"caret \" + (sT[\"activity\"] ? \"down\" : \"right\")\n                                                            }\n                                                        />\n                                                    </h5>\n                                                }\n                                                active={sT[\"activity\"]}\n                                                onClick={() => {\n                                                    toggleTabActive(\"activity\");\n                                                }}\n                                                inverted={this.props.nm}\n                                            />\n                                        </Menu>\n                                        {sT[\"activity\"] && (\n                                            <Segment\n                                                color=\"brown\"\n                                                attached=\"bottom\"\n                                                inverted={this.props.nm}\n                                            >\n                                                {(commentDetails && (\n                                                    <ActivityComponent comments={commentDetails}/>\n                                                )) ||\n                                                this.getPlaceHolder()}\n                                            </Segment>\n                                        )}\n                                    </div>\n                                    <Rail position=\"right\" attached>\n                                        <Sticky\n                                            bottomOffset={300}\n                                            offset={0}\n                                            styleElement={{marginTop: \"60px\"}}\n                                            context={this.contextRef}\n                                        >\n                                            <Card inverted={this.props.nm}>\n                                                <Card.Content header=\"Pinned Details\"/>\n                                                <Card.Content\n                                                    description={\n                                                        <Item.Group relaxed>\n                                                            <Item>\n                                                                <Item.Content>\n                                                                    <Item.Header as=\"span\">Assignee</Item.Header>\n                                                                    <Item.Description>\n                                                                        <Image\n                                                                            src=\"https://react.semantic-ui.com/images/avatar/small/jenny.jpg\"\n                                                                            avatar\n                                                                            circular\n                                                                        />\n                                                                        Super Jenny\n                                                                    </Item.Description>\n                                                                </Item.Content>\n                                                            </Item>\n                                                            <Item>\n                                                                <Item.Content>\n                                                                    <Item.Header as=\"span\">\n                                                                        Risk Level\n                                                                    </Item.Header>\n                                                                    <Item.Description>L2</Item.Description>\n                                                                </Item.Content>\n                                                            </Item>\n\n                                                            <Item>\n                                                                <Item.Content>\n                                                                    <Item.Header as=\"span\">Priority</Item.Header>\n                                                                    <Item.Description>\n                                    <span className=\"ui red\">\n                                      <Icon\n                                          name=\"angle double up\"\n                                          color=\"red\"\n                                      />\n                                      Severe\n                                    </span>\n                                                                    </Item.Description>\n                                                                </Item.Content>\n                                                            </Item>\n                                                        </Item.Group>\n                                                    }\n                                                />\n                                                <Card.Content extra>\n                                                    <Icon name=\"comments\"/>4 Comments\n                                                </Card.Content>\n                                            </Card>\n                                        </Sticky>\n                                    </Rail>\n                                </Container>\n                            </Ref>\n                        </Grid.Column>\n                    </Grid>\n                </Container>\n            </Ref>\n        );\n    }\n\n    getPlaceHolder() {\n        return (\n            <Placeholder style={{marginLeft: \"50px\"}} inverted={this.props.nm}>\n                <Placeholder.Header image>\n                    <Placeholder.Line/>\n                    <Placeholder.Line/>\n                </Placeholder.Header>\n                <Placeholder.Paragraph>\n                    <Placeholder.Line/>\n                    <Placeholder.Line/>\n                    <Placeholder.Line/>\n                    <Placeholder.Line/>\n                </Placeholder.Paragraph>\n            </Placeholder>\n        );\n    }\n}\n",
    "import React, {Component} from \"react\";\nimport {Table, Container, Pagination} from \"semantic-ui-react\";\nimport {Icon, Label, Menu} from \"semantic-ui-react\";\nimport {DB} from \"../API\";\nimport DetailsComponent from \"./DetailsComponent\";\n\nexport default class ListIssues extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            issues: [],\n            all_issues: [],\n            asc_sort_order: true,\n            pageSize: 20,\n            selectedIssue: \"\",\n            lastVisitedIssue: \"\"\n        };\n        this.updatePageNumber = this.updatePageNumber.bind(this);\n        this.selectIssue = this.selectIssue.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateIssuesList();\n    }\n\n    componentWillReceiveProps(updated_props) {\n        if (this.state.projectName !== updated_props.project) {\n            this.setState(\n                {selectedIssue: \"\", projectName: updated_props.project},\n                () => {\n                    this.updateIssuesList();\n                }\n            );\n        }\n    }\n\n    updateIssuesList() {\n        let project_issues = DB.issues[this.props.project];\n        if (project_issues) {\n            this.setState({all_issues: project_issues}, () => {\n                this.updatePageNumber(null, {activePage: 1});\n            });\n        } else {\n            this.setState({all_issues: []}, () => {\n                this.updatePageNumber(null, {activePage: 1});\n            });\n        }\n    }\n\n    render() {\n        const so = this.state.asc_sort_order ? \"ascending\" : \"descending\";\n        const totalPages = this.state.all_issues.length / this.state.pageSize;\n        const selectedIssue = this.state.selectedIssue;\n        let toggleSort = () => {\n            this.setState({asc_sort_order: !this.state.asc_sort_order});\n        };\n        if (selectedIssue)\n            return (\n                <DetailsComponent\n                    goBack={() => this.selectIssue(\"\")}\n                    issueId={selectedIssue}\n                    project={this.props.project}\n                    issue_summary={this.state.issue_summary}\n                    nm={this.props.nm}\n                />\n            );\n\n        return (\n            <Container>\n                <Table\n                    celled\n                    selectable\n                    sortable\n                    compact\n                    singleLine\n                    inverted={this.props.nm}\n                >\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Incident Id</Table.HeaderCell>\n                            <Table.HeaderCell>Entity Type</Table.HeaderCell>\n                            <Table.HeaderCell>Entity Id</Table.HeaderCell>\n                            <Table.HeaderCell className={\"sorted \" + so} onClick={toggleSort}>\n                                Updated On\n                            </Table.HeaderCell>\n                            <Table.HeaderCell>Status</Table.HeaderCell>\n                            <Table.HeaderCell>Score</Table.HeaderCell>\n                            <Table.HeaderCell>Summary</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n                        {this.state.issues.map(ei => this.getRowFromIssue(ei))}\n                    </Table.Body>\n                </Table>\n                <div className=\"ui centered\">\n                    <Pagination\n                        inverted={this.props.nm}\n                        onPageChange={this.updatePageNumber}\n                        defaultActivePage={1}\n                        ellipsisItem={{\n                            content: <Icon name=\"ellipsis horizontal\"/>,\n                            icon: true\n                        }}\n                        boundaryRange={0}\n                        siblingRange={1}\n                        firstItem={{\n                            content: <Icon name=\"angle double left\"/>,\n                            icon: true\n                        }}\n                        lastItem={{\n                            content: <Icon name=\"angle double right\"/>,\n                            icon: true\n                        }}\n                        prevItem={{content: <Icon name=\"angle left\"/>, icon: true}}\n                        nextItem={{content: <Icon name=\"angle right\"/>, icon: true}}\n                        totalPages={totalPages}\n                    />\n                </div>\n            </Container>\n        );\n    }\n\n    selectIssue(issueId, issue_summary = {}) {\n        if (!issueId) this.setState({selectedIssue: issueId, issue_summary: {}});\n        else\n            this.setState({\n                selectedIssue: issueId,\n                issue_summary: issue_summary,\n                lastVisitedIssue: issueId\n            });\n    }\n\n    getRowFromIssue(each_issue) {\n        const displayDate = new Date(\n            parseInt(each_issue.updated_on)\n        ).toLocaleString(\"en-IN\", {timeZone: \"UTC\"});\n        const is_warning_issue = parseInt(each_issue.score) >= 700;\n        const is_last_visited =\n            this.state.lastVisitedIssue === each_issue.incident_id;\n\n        return (\n            <Table.Row\n                disabled={each_issue.status === \"Closed\"}\n                // warning={is_warning_issue}\n                // inverted={this.props.nm}\n                key={\"incident_\" + each_issue.incident_id}\n                onClick={() => this.selectIssue(each_issue.incident_id, each_issue)}\n            >\n                <Table.Cell>\n                    <Label size=\"small\" color=\"violet\" ribbon={is_last_visited}>\n                        {each_issue.incident_id}\n                    </Label>\n                </Table.Cell>\n                <Table.Cell>\n                    {this.getIconForEntityType(each_issue.entity_type)}\n                </Table.Cell>\n                <Table.Cell>{each_issue.entity_id}</Table.Cell>\n                <Table.Cell> {displayDate} </Table.Cell>\n                <Table.Cell>{each_issue.status}</Table.Cell>\n                <Table.Cell>\n                    {is_warning_issue && <Icon name=\"attention\"/>}\n                    {each_issue.score}\n                </Table.Cell>\n                <Table.Cell>{each_issue.summary}</Table.Cell>\n            </Table.Row>\n        );\n    }\n\n    getIconForEntityType(entity_type) {\n        if (entity_type === \"Account\") {\n            return (\n                <Label image color={this.props.nm ? \"black\" : \"default\"}>\n                    <Icon name=\"folder outline\"/> {entity_type}\n                </Label>\n            );\n        } else if (entity_type === \"Customer\") {\n            return (\n                <Label image color={this.props.nm ? \"black\" : \"default\"}>\n                    <Icon name=\"users\"/>\n                    {entity_type}\n                </Label>\n            );\n        } else if (entity_type === \"Employee\") {\n            return (\n                <Label image color={this.props.nm ? \"black\" : \"default\"}>\n                    <Icon name=\"suitcase\"/>\n                    {entity_type}\n                </Label>\n            );\n        } else if (entity_type === \"Branch\") {\n            return (\n                <Label image color={this.props.nm ? \"black\" : \"default\"}>\n                    <Icon name=\"code branch\"/>\n                    {entity_type}\n                </Label>\n            );\n        }\n    }\n\n    updatePageNumber(_, {activePage}) {\n        let pg = this.state.pageSize;\n        let slice = this.state.all_issues.slice(\n            pg * (activePage - 1),\n            pg * activePage\n        );\n        this.setState({issues: slice});\n    }\n}\n",
    "import React, {Component} from \"react\";\nimport {Image, Menu, Icon} from \"semantic-ui-react\";\n\nexport default class HeaderComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {nm: false};\n    }\n\n    render() {\n        const toggleNightMode = () => {\n            this.setState({nm: !this.state.nm}, () => {\n                this.props.night(this.state.nm);\n            });\n        };\n\n        return (\n            <Menu color=\"blue\" inverted className=\"fixed\" style={{zIndex: 100}}>\n                <Image\n                    src=\"https://github.com/MrL1605/demo/raw/master/assets/clari5_logo.png\"\n                    alt=\"Clari5 Logo\"\n                    size=\"small\"\n                    verticalAlign=\"middle\"\n                    bordered\n                    onClick={() => {\n                        window.location.reload();\n                    }}\n                />\n\n                <Menu.Menu position=\"right\">\n                    <Menu.Item name=\"theme\" onClick={toggleNightMode}>\n                        {(this.state.nm && (\n                            <span>\n                <Icon name=\"moon\"/> Dark\n              </span>\n                        )) || (\n                            <span>\n                <Icon name=\"sun\"/> Light\n              </span>\n                        )}\n                    </Menu.Item>\n                </Menu.Menu>\n            </Menu>\n        );\n    }\n}\n",
    "import React, {Component, createRef} from \"react\";\nimport {\n    Sidebar,\n    Menu,\n    Segment,\n    Dimmer,\n    Loader,\n    Placeholder,\n    Icon,\n    Button,\n    Rail,\n    Grid,\n    Ref,\n    Sticky,\n    Header,\n    Container,\n    Popup\n} from \"semantic-ui-react\";\nimport {DB} from \"../API\";\nimport ListIssues from \"./ListIssues\";\nimport HeaderComponent from \"./HeaderComponent\";\n\nexport default class GenesisComponent extends Component {\n    constructor() {\n        super();\n        this.state = {\n            visible: false,\n            removeSidebar: true,\n            project: \"\",\n            projectList: [],\n            nm: false\n        };\n        this.listContentRef = createRef();\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            let projects = DB.projects;\n            if (projects)\n                this.setState({projectList: projects, project: projects[0]});\n        }, 1000);\n    }\n\n    render() {\n        const removeSideNow = () => {\n            this.setState({removeSidebar: true});\n        };\n        const updateSideBarState = visibility => {\n            if (visibility !== this.state.visible)\n                if (visibility) this.setState({visible: true, removeSidebar: false});\n                else this.setState({visible: false});\n        };\n        const setProject = p => {\n            if (p) this.setState({project: p, visible: false});\n            else this.setState({visible: false});\n        };\n        const {projectList, project, visible, removeSidebar} = this.state;\n\n        return (\n            <div style={{height: \"100%\", position: \"relative\"}}>\n                <Segment\n                    basic\n                    inverted={this.state.nm}\n                    style={{position: \"absolute\", width: \"100%\", marginBottom: \"0\"}}\n                >\n                    <div style={{marginTop: \"65px\"}}/>\n                    {/* {sticker()} */}\n                    {(project && <ListIssues project={project} nm={this.state.nm}/>) ||\n                    this.getPlaceHolders()}\n                </Segment>\n\n                <div style={{position: \"fixed\"}}>\n                    <Popup\n                        content=\"Project List\"\n                        position=\"bottom left\"\n                        trigger={\n                            <Button\n                                size=\"big\"\n                                color={this.state.nm ? \"white\" : \"black\"}\n                                floated=\"left\"\n                                attached=\"right\"\n                                style={{marginTop: \"100px\", zIndex: 20}}\n                                onClick={() => updateSideBarState(true)}\n                                data-content=\"Project List\"\n                            >\n                                <Icon name=\"content\"/>\n                                {/* <span className=\"text\">Projects</span> */}\n                            </Button>\n                        }\n                    />\n                </div>\n\n                <Sidebar.Pushable\n                    as={Segment}\n                    style={{\n                        marginTop: \"0\",\n                        background: \"none\",\n                        border: 0,\n                        height: removeSidebar ? \"0\" : \"100%\",\n                        width: removeSidebar ? \"0\" : \"100%\",\n                        position: \"absolute\"\n                    }}\n                >\n                    {projectList.length && (\n                        <Sidebar\n                            as={Menu}\n                            animation=\"overlay\"\n                            icon=\"labeled\"\n                            inverted\n                            onHidden={() => removeSideNow()}\n                            // onHide={() => updateSideBarState(false)}\n                            vertical\n                            visible={visible}\n                            width=\"thin\"\n                        >\n                            <div style={{marginTop: \"50px\"}}/>\n                            <Menu.Item as=\"a\" onClick={() => setProject(\"\")}>\n                                <Icon name=\"search\"/>\n                                Search\n                            </Menu.Item>\n                            {projectList.map(p => (\n                                <Menu.Item key={p} as=\"a\" onClick={() => setProject(p)}>\n                                    {p}\n                                </Menu.Item>\n                            ))}\n                            <Menu.Item as=\"a\" onClick={() => setProject(\"\")}>\n                                <Icon name=\"arrow left\"/>\n                                Go Back\n                            </Menu.Item>\n                        </Sidebar>\n                    )}\n\n                    {/* <Sidebar.Pusher dimmed={visible}>\n            <Segment basic />\n          </Sidebar.Pusher> */}\n                </Sidebar.Pushable>\n                <HeaderComponent night={_nm => this.setState({nm: _nm})}/>\n            </div>\n        );\n    }\n\n    getPlaceHolders() {\n        return (\n            <Container>\n                <Segment\n                    basic\n                    padded=\"very\"\n                    style={{height: \"100vh\", zIndex: 10}}\n                    inverted={this.state.nm}\n                >\n                    <Placeholder style={{margin: \"30px 0 0 20%\"}}>\n                        <Placeholder.Header image>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                        </Placeholder.Header>\n                        <Placeholder.Paragraph>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                        </Placeholder.Paragraph>\n                        <Placeholder.Line/>\n                        <Placeholder.Header>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                        </Placeholder.Header>\n                        <Placeholder.Paragraph>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                        </Placeholder.Paragraph>\n                        <Placeholder.Header>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                        </Placeholder.Header>\n                        <Placeholder.Paragraph>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                        </Placeholder.Paragraph>\n                        <Placeholder.Header>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                        </Placeholder.Header>\n                        <Placeholder.Paragraph>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                        </Placeholder.Paragraph>\n                    </Placeholder>\n                </Segment>\n            </Container>\n        );\n    }\n}\n",
    "import React, {Component} from \"react\";\nimport \"./styles.css\";\nimport {\n    Button,\n    Divider,\n    Segment,\n    Sidebar,\n    Header,\n    Menu,\n    Icon,\n    Image\n} from \"semantic-ui-react\";\nimport GenesisComponent from \"./icms/GenesisComponent\";\n\nexport default class App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            visible: true,\n            showICMS: false\n        };\n        this.openICMS = this.openICMS.bind(this);\n    }\n\n    openICMS() {\n        this.setState({showICMS: true});\n    }\n\n    render() {\n        if (this.state.showICMS) {\n            return <GenesisComponent/>;\n        }\n\n        return (\n            <div className=\"App\">\n                <h1>ICMS</h1>\n                <h2>Code Name: Plutonium</h2>\n                <h3>Let's see what this CSS framework has for you</h3>\n                <Button onClick={this.openICMS}>Open ICMS</Button>\n            </div>\n        );\n    }\n}\n",
    "import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\n// TODO: Switch to https://github.com/palmerhq/the-platform#stylesheet when it will be stable\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href =\n    \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    rootElement\n);\n"
  ],
  "sourceRoot": ""
}
